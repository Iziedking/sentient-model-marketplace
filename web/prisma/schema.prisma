generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  // NEXTAUTH relations
  accounts Account[]
  sessions Session[]

  // MARKETPLACE: back-relations + counters
  modelListings ModelListing[]
  purchases     Purchase[]
  usageCalls    UsageCall[]

  // Credits & stats (in cents / counters)
  creditsCents    Int @default(2500) // $25.00 for new signups
  totalSpentCents Int @default(0)
  totalCalls      Int @default(0)

  // Leaderboard helper (optional)
  totalPurchases Int @default(0)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @map("refresh_token")
  access_token      String? @map("access_token")
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


model ModelListing {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // ownership
  ownerId String
  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  // public info
  name      String
  slug      String  @unique
  ownerName String?
  category  String

  // SQLite cannot store String[]; store CSV (or JSON string) instead
  tagsCsv String @default("") 

  pricePer1k Float // dollars per 1K tokens (or per-call)
  latencyMs  Int
  rating     Float  @default(4.0)
  short      String

 
  storagePath String?
  publicUrl   String?

  // usage / monetization counters
  totalPurchases Int @default(0)
  totalCalls     Int @default(0)
  revenueCents   Int @default(0)

  purchases  Purchase[]
  usageCalls UsageCall[]
}

model Purchase {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  userId String
  user   User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  modelId String
  model   ModelListing @relation(fields: [modelId], references: [id], onDelete: Cascade)

  priceCents Int

  @@unique([userId, modelId])
}


model UsageCall {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  modelId String
  model   ModelListing @relation(fields: [modelId], references: [id], onDelete: Cascade)

  // cost for this call
  tokens    Int
  costCents Int
}
