generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id              String         @id @default(cuid())
  name            String?
  email           String?        @unique
  emailVerified   DateTime?
  image           String?
  creditsCents    Int            @default(2500)
  totalSpentCents Int            @default(0)
  totalCalls      Int            @default(0)
  totalPurchases  Int            @default(0)
  accounts        Account[]
  modelListings   ModelListing[]
  purchases       Purchase[]
  sessions        Session[]
  usageCalls      UsageCall[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @map("refresh_token")
  access_token      String? @map("access_token")
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ModelListing {
  id             String      @id @default(cuid())
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  ownerId        String
  name           String
  slug           String      @unique
  ownerName      String?
  category       String
  tagsCsv        String      @default("")
  pricePer1k     Float
  latencyMs      Int
  rating         Float       @default(4.0)
  short          String
  storagePath    String?
  publicUrl      String?
  totalPurchases Int         @default(0)
  totalCalls     Int         @default(0)
  revenueCents   Int         @default(0)
  owner          User        @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  purchases      Purchase[]
  usageCalls     UsageCall[]
}

model Purchase {
  id         String       @id @default(cuid())
  createdAt  DateTime     @default(now())
  userId     String
  modelId    String
  priceCents Int
  model      ModelListing @relation(fields: [modelId], references: [id], onDelete: Cascade)
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, modelId])
}

model UsageCall {
  id        String       @id @default(cuid())
  createdAt DateTime     @default(now())
  userId    String
  modelId   String
  tokens    Int
  costCents Int
  model     ModelListing @relation(fields: [modelId], references: [id], onDelete: Cascade)
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}
